// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/dafaath/iot-server/v2/configs"
	"github.com/dafaath/iot-server/v2/internal/database"
	"github.com/dafaath/iot-server/v2/internal/dependencies"
	"github.com/dafaath/iot-server/v2/internal/handlers"
	"github.com/dafaath/iot-server/v2/internal/middlewares"
	"github.com/dafaath/iot-server/v2/internal/repositories"
	"github.com/dafaath/iot-server/v2/internal/server/http"
	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
)

// Injectors from wire.go:

func InitializeApp() (*fiber.App, error) {
	validate := validator.New()
	dependenciesValidator := dependencies.NewValidator(validate)
	authenticationMiddleware := middlewares.NewAuthenticationMiddleware(dependenciesValidator)
	pool, err := database.GetConnection()
	if err != nil {
		return nil, err
	}
	config := configs.GetConfig()
	dialer, err := dependencies.NewMailDialer(config)
	if err != nil {
		return nil, err
	}
	userRepository, err := repositories.NewUserRepository(dialer)
	if err != nil {
		return nil, err
	}
	userHandler, err := handlers.NewUserHandler(pool, userRepository, dependenciesValidator)
	if err != nil {
		return nil, err
	}
	hardwareRepository, err := repositories.NewHardwareRepository()
	if err != nil {
		return nil, err
	}
	nodeRepository, err := repositories.NewNodeRepository()
	if err != nil {
		return nil, err
	}
	hardwareHandler, err := handlers.NewHardwareHandler(pool, hardwareRepository, nodeRepository, dependenciesValidator)
	if err != nil {
		return nil, err
	}
	channelRepository, err := repositories.NewChannelRepository()
	if err != nil {
		return nil, err
	}
	nodeHandler, err := handlers.NewNodeHandler(pool, nodeRepository, channelRepository, hardwareRepository, dependenciesValidator)
	if err != nil {
		return nil, err
	}
	channelHandler, err := handlers.NewChannelHandler(pool, channelRepository, nodeRepository, dependenciesValidator)
	if err != nil {
		return nil, err
	}
	app, err := http.NewHTTPServer(authenticationMiddleware, userHandler, hardwareHandler, nodeHandler, channelHandler)
	if err != nil {
		return nil, err
	}
	return app, nil
}
